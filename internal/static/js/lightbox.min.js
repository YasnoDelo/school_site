/*!
 * Lightbox v2.11.5
 * by Lokesh Dhakar
 *
 * More info:
 * http://lokeshdhakar.com/projects/lightbox2/
 *
 * Copyright Lokesh Dhakar
 * Released under the MIT license
 * https://github.com/lokesh/lightbox2/blob/master/LICENSE
 *
 * @preserve
 */
(function(global, factory) {
    if (typeof define === 'function' && define.amd) {
      // AMD support
      define(['jquery'], factory);
    } else if (typeof exports === 'object') {
      // CommonJS support
      module.exports = factory(require('jquery'));
    } else {
      // Browser global
      global.lightbox = factory(global.jQuery);
    }
  })(this, function($) {
  
    // Constructor
    function Lightbox(options) {
      this.album = [];
      this.currentImageIndex = undefined;
  
      this.init();
      this.options = $.extend({}, this.constructor.defaults);
      this.option(options);
    }
  
    // Default options
    Lightbox.defaults = {
      albumLabel: 'Image %1 of %2',
      alwaysShowNavOnTouchDevices: false,
      fadeDuration: 600,
      fitImagesInViewport: true,
      imageFadeDuration: 600,
      positionFromTop: 50,
      resizeDuration: 700,
      showImageNumberLabel: true,
      wrapAround: false,
      disableScrolling: false,
      sanitizeTitle: false
    };
  
    // Merge user options
    Lightbox.prototype.option = function(opts) {
      $.extend(this.options, opts);
    };
  
    // Format the “Image X of Y” label
    Lightbox.prototype.imageCountLabel = function(cur, total) {
      return this.options.albumLabel
        .replace(/%1/g, cur)
        .replace(/%2/g, total);
    };
  
    // Initialize: bind handlers when document is ready
    Lightbox.prototype.init = function() {
      var self = this;
      $(document).ready(function() {
        self.enable();
        self.build();
      });
    };
  
    // Set up click handlers on links/areas
    Lightbox.prototype.enable = function() {
      var self = this;
      $('body').on('click', 'a[rel^=lightbox], area[rel^=lightbox], a[data-lightbox], area[data-lightbox]',
        function(event) {
          self.start($(event.currentTarget));
          return false;
        }
      );
    };
  
    // Build the DOM elements for overlay and lightbox
    Lightbox.prototype.build = function() {
      if ($('#lightbox').length) return;
  
      var self = this;
      var markup = ''
        + '<div id="lightboxOverlay" class="lightboxOverlay" tabindex="-1"></div>'
        + '<div id="lightbox" class="lightbox" tabindex="-1">'
        +   '<div class="lb-outerContainer">'
        +     '<div class="lb-container">'
        +       '<img class="lb-image" src="" alt="" />'
        +       '<div class="lb-nav">'
        +         '<a class="lb-prev" role="button" tabindex="0" aria-label="Previous image"></a>'
        +         '<a class="lb-next" role="button" tabindex="0" aria-label="Next image"></a>'
        +       '</div>'
        +       '<div class="lb-loader"><a class="lb-cancel" role="button" tabindex="0"></a></div>'
        +     '</div>'
        +   '</div>'
        +   '<div class="lb-dataContainer">'
        +     '<div class="lb-data">'
        +       '<div class="lb-details">'
        +         '<span class="lb-caption"></span>'
        +         '<span class="lb-number"></span>'
        +       '</div>'
        +       '<div class="lb-closeContainer">'
        +         '<a class="lb-close" role="button" tabindex="0"></a>'
        +       '</div>'
        +     '</div>'
        +   '</div>'
        + '</div>';
  
      $(markup).appendTo($('body'));
  
      this.$overlay        = $('#lightboxOverlay');
      this.$lightbox       = $('#lightbox');
      this.$outerContainer = this.$lightbox.find('.lb-outerContainer');
      this.$container      = this.$lightbox.find('.lb-container');
      this.$image          = this.$lightbox.find('.lb-image');
      this.$nav            = this.$lightbox.find('.lb-nav');
  
      // Cache padding and border widths for sizing
      this.containerPadding = {
        top:    parseInt(this.$container.css('padding-top'),    10),
        right:  parseInt(this.$container.css('padding-right'),  10),
        bottom: parseInt(this.$container.css('padding-bottom'), 10),
        left:   parseInt(this.$container.css('padding-left'),   10)
      };
      this.imageBorderWidth = {
        top:    parseInt(this.$image.css('border-top-width'),    10),
        right:  parseInt(this.$image.css('border-right-width'),  10),
        bottom: parseInt(this.$image.css('border-bottom-width'), 10),
        left:   parseInt(this.$image.css('border-left-width'),   10)
      };
  
      // Hide initially
      this.$overlay.hide().on('click', function() {
        self.end();
        return false;
      });
      this.$lightbox.hide().on('click', function(event) {
        if ($(event.target).attr('id') === 'lightbox') {
          self.end();
        }
      });
  
      // Prev/Next controls
      this.$lightbox.find('.lb-prev').on('click', function() {
        var newIndex = self.currentImageIndex === 0
          ? self.album.length - 1
          : self.currentImageIndex - 1;
        self.changeImage(newIndex);
        return false;
      });
      this.$lightbox.find('.lb-next').on('click', function() {
        var newIndex = self.currentImageIndex === self.album.length - 1
          ? 0
          : self.currentImageIndex + 1;
        self.changeImage(newIndex);
        return false;
      });
  
      // Cancel loader & close button
      this.$lightbox.find('.lb-loader, .lb-close').on('click keyup', function(event) {
        if (event.type === 'click'
            || (event.type === 'keyup' && (event.which === 13 || event.which === 32))) {
          self.end();
          return false;
        }
      });
    };
  
    // Show overlay sized to viewport
    Lightbox.prototype.sizeOverlay = function() {
      this.$overlay
        .width($(document).width())
        .height($(document).height());
    };
  
    // Start lightbox on a clicked element
    Lightbox.prototype.start = function($link) {
      var self = this, windowScroll = $(window).scrollTop();
  
      $(window).on('resize', $.proxy(this.sizeOverlay, this));
      this.sizeOverlay();
  
      this.album = [];
      var linkGroup = $link.data('lightbox')
        ? $('a[data-lightbox="' + $link.data('lightbox') + '"]')
        : $link;
      linkGroup.each(function(i) {
        var $item = $(this);
        self.album.push({
          link:  $item.attr('href'),
          title: $item.data('title')  || $item.attr('title') || ''
        });
        if (this === $link[0]) {
          self.currentImageIndex = i;
        }
      });
  
      // Position lightbox and show
      var top  = windowScroll + this.options.positionFromTop;
      var left = $(window).scrollLeft();
      this.$lightbox.css({ top: top + 'px', left: left + 'px' })
                    .fadeIn(this.options.fadeDuration);
      if (this.options.disableScrolling) {
        $('body').addClass('lb-disable-scrolling');
      }
      this.changeImage(this.currentImageIndex);
    };
  
    // Change to a new image index
    Lightbox.prototype.changeImage = function(index) {
      var self = this,
          imgData = this.album[index];
  
      this.disableKeyboardNav();
      this.$overlay.fadeIn(this.options.fadeDuration);
      $('.lb-loader').fadeIn('slow');
  
      this.$lightbox.find('.lb-image').hide();
      this.$lightbox.find('.lb-nav, .lb-caption, .lb-number').hide();
  
      // Preload image
      var img = new Image();
      img.onload = function() {
        // Resize container
        var imageWidth  = img.width  + self.imageBorderWidth.left + self.imageBorderWidth.right + self.containerPadding.left + self.containerPadding.right,
            imageHeight = img.height + self.imageBorderWidth.top  + self.imageBorderWidth.bottom + self.containerPadding.top  + self.containerPadding.bottom;
  
        self.sizeContainer(imageWidth, imageHeight);
        self.$lightbox.find('.lb-image')
          .attr('src', imgData.link)
          .fadeIn(self.options.imageFadeDuration);
  
        self.updateDetails();
        self.preloadNeighboringImages();
        self.enableKeyboardNav();
      };
      img.src = imgData.link;
    };
  
    // Resize outer container smoothly
    Lightbox.prototype.sizeContainer = function(width, height) {
      var self = this;
      var oldWidth  = this.$outerContainer.width(),
          oldHeight = this.$outerContainer.height();
  
      this.$outerContainer.animate({
        width:  width,
        height: height
      }, this.options.resizeDuration, 'swing');
      setTimeout(function() {
        self.$lightbox.find('.lb-dataContainer').width(width);
      }, this.options.resizeDuration);
    };
  
    // Update caption and image number
    Lightbox.prototype.updateDetails = function() {
      var current = this.currentImageIndex + 1,
          total   = this.album.length;
  
      if (this.album[this.currentImageIndex].title) {
        this.$lightbox.find('.lb-caption').html(this.album[this.currentImageIndex].title).show();
      }
      if (this.options.showImageNumberLabel) {
        this.$lightbox.find('.lb-number')
          .html(this.imageCountLabel(current, total))
          .show();
      }
      this.$outerContainer.removeClass('animating');
      this.$lightbox.find('.lb-loader').hide();
      this.$lightbox.find('.lb-nav').show();
    };
  
    // Preload prev/next images
    Lightbox.prototype.preloadNeighboringImages = function() {
      var self = this;
      if (this.album.length > this.currentImageIndex + 1) {
        (new Image()).src = this.album[this.currentImageIndex + 1].link;
      }
      if (this.currentImageIndex > 0) {
        (new Image()).src = this.album[this.currentImageIndex - 1].link;
      }
    };
  
    // Keyboard navigation
    Lightbox.prototype.enableKeyboardNav = function() {
      var self = this;
      $(document).on('keyup.keyboard', function(event) {
        if (event.keyCode === 27) {       // Esc
          self.end();
        } else if (event.keyCode === 37) { // Left arrow
          if (self.currentImageIndex > 0 || self.options.wrapAround) {
            self.changeImage((self.currentImageIndex + self.album.length - 1) % self.album.length);
          }
        } else if (event.keyCode === 39) { // Right arrow
          if (self.currentImageIndex < self.album.length - 1 || self.options.wrapAround) {
            self.changeImage((self.currentImageIndex + 1) % self.album.length);
          }
        }
      });
    };
  
    Lightbox.prototype.disableKeyboardNav = function() {
      $(document).off('.keyboard');
    };
  
    // Close and cleanup
    Lightbox.prototype.end = function() {
      var self = this;
      this.disableKeyboardNav();
      this.$lightbox.fadeOut(this.options.fadeDuration);
      this.$overlay.fadeOut(this.options.fadeDuration, function() {
        if (self.options.disableScrolling) {
          $('body').removeClass('lb-disable-scrolling');
        }
        self.$lightbox.remove();
        self.$overlay.remove();
      });
    };
  
    return Lightbox;
  });
  